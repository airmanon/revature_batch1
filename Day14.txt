
AJAX - Asynchronous Javascript And Xml

Partial Page reload, Part of the page update

It's mechanism of exchanging date between the client & server without submitting the whole page

https://www.javatpoint.com/src/ajax/ajaxexample.zip


AJAX
AJAX stands for Asynchronous JavaScript And XML. Ajax describes the process of exchanging data from a web server asynchronously with the help of XML, HTML, CSS, and JavaScript. It just loads the data from the server and selectively updates some webpage parts without refreshing the page. Ajax uses the browser's built-in XMLHttpRequest (XHR) object to send and receive data to and from a web server asynchronously, in the background, without blocking the page or interfering with the user's experience.

Despite the name, modern usage of AJAX usually works with JSON data rather than XML as we will see.

Ajax Work Flow
Ajax works flow starts from the client-side, on the browser. The steps involved in Ajax communication as follows:

A client event occurs on a webpage. (for example, the user clicks a button)
JavaScript creates an XMLHttpRequest object.
The XMLHttpRequest object makes an asynchronous request to the server.
The server process the received HttpRequest.
The server creates a response and sends data back to the browser.
Browser process the returned data using JavaScript.
The page content updated by javascript.
The XMLHttpRequest Object
The keystone of AJAX is the XMLHttpRequest object. An XMLHttpRequest (XHR) object used to make HTTP requests to the server and receive data in response.

Create an XMLHttpRequest Object:
Before you perform Ajax communication between client and server, we should create an XMLHttpRequest object.

var xhttp = new XMLHttpRequest();
Send a Request To a Server:
To send a request to a server, we use the open() and send() methods of the XMLHttpRequest object.

open(method, URL, async)
where, method — Specifies the HTTP request method to use, such as "GET", "POST", etc., URL - Specifies the location of the server async - Specifies whether the request should be handled asynchronously or not. If "true" then the script processing carries without waiting for a response. If "false" then the script waits for a response.

send() - Sends the request to the server. It accepts an optional parameter that allows us to specify the request's body (used for POST).
In the GET method, the data is sent as URL parameters. In the POST method, the data is sent to the server as a part of the HTTP request body, which is not visible in the URL.

xhttp.open("GET", "ajax_info.txt", true);
xhttp.send();
Server Response
The Server Response returned in the form of responseText or responseXML or status or statusText.

responseText - Returns the response as a string.

responseXML - Returns the response as XML.

status - Returns the status as a number (For example, 200: "OK", 403: "Forbidden",404: "Page not found")

statusText -Returns the status as a string (e.g., "Not Found" or "OK").

We have to wait for the data to be available to process it, and in this purpose, the state of availability of data is given by the readyState attribute of XMLHttpRequest. The onreadystatechange function is called every time the readyState changes.

The readyState property defines the status of the XMLHttpRequest:

readyState = 0 : Not intialized
readyState = 1 : Connection establised
readyState = 2 : request received
readyState = 3 : processing request
readyState = 4 : request finished and response is ready
Example:

<script>
function loadDoc() {
  var xhttp = new XMLHttpRequest();
  xhttp.onreadystatechange = function() {
    if (this.readyState == 4 && this.status == 200) {
      document.getElementById("demo").innerHTML =
      this.responseText;
    }
  };
  xhttp.open("GET", "ajax_info.txt", true);
  xhttp.send();
}
</script>
Working with JSON in Ajax
Sending JSON request payload and receiving the JSON response object are common tasks while dealing with AJAX. JavaScript retrieves the JSON data sent by the server, parse them, and displaying them on the webpage.

JSON in Request Payload
In JavaScript, to send a request using JSON data, we need to serialize our JSON object into a string. The JSON.stringify() method is used to converting an object to a string. Then, the server receives the string and process the request.

Example:

var data = {"name" : "Matt"};
var xmlhttp = new XMLHttpRequest();
xmlhttp.open("POST", "/demo", true);
//Use stringify() method to get string
xmlhttp.send( JSON.stringify( data ) );
JSON in Response Body
If the response from the server is string/text, we need to parse them into a JSON object. The JSON.parse() method converts a JSON string representation to a JSON object.

Example:

var xmlhttp = new XMLHttpRequest();

xmlhttp.onreadystatechange = function() {
    if (this.readyState == 4 && this.status == 200) {
        //Use parse() method to convert JSON string to JSON object
        var responseJsonObj = JSON.parse(this.responseText);

        console.log( responseJsonObj.name );
        console.log( responseJsonObj.age );
    }
};

xmlhttp.open("GET", "/demo", true);

xmlhttp.send();
XML in Response Body
While we normally wish to parse our response from JSON, sometimes we might be dealing with an older server and we need to parse XML data. The responseXML field contains the data as a read-only Document Object Model.

Example:

var xmlhttp = new XMLHttpRequest();

xmlhttp.onreadystatechange = function() {
    if (this.readyState == 4 && this.status == 200) {
        var responseXml = this.responseXML;

        console.log( responseXml.getElementsByTagName('myTag') )
    }
};

xmlhttp.open("GET", "/demo", true);

xmlhttp.send();



DESCRIPTION
== vs ===
== is used for comparison between two variables irrespective of the data type of variable. === is used for comparison between two variables but this will check strict type, which means it will check datatype and compare two values.

Example:

5 == '5' // Returns true
5 === '5' // Returns False
== is a type converting equality that automatically converts the string ('5') to number (5). It does implicit type conversion of variables.

=== is strict equality also compares the data type of the variable. It returns true only if the data type and value of the two variables are the same.

Type coercion
Type coercion is the process of converting a value from one data type to another data type.

Explicit type coercion - We can explicitly convert the datatype of the variable. For example: Number('3'), String (123), Boolean(2)

Implicit type coercion - JavaScript is a loosely-typed language, values can also be converted between different types automatically. It usually happens when you apply operators to values of different types. For example: '3' * '2', 2/’5', 123 + ''

String conversion
To explicitly convert values to a string apply the String() function. Implicit coercion is triggered by the binary + operator when any operand is a string.

Example:

String(123) // explicit
123 + ''    // implicit
Boolean conversion
To explicitly convert a value to a boolean apply the Boolean() function. Implicit conversion happens in logical context, or is triggered by logical operators ( || && !).

Example:

Boolean(21)          // explicit
if (2) { ... }      // implicit due to logical context
7 || 'hello'        // implicit due to logical operator
Number conversion
To explicitly convert a value to a boolean apply the Number() function. Implicit coercion is triggered by comparison operators (>, <, <=,>=), bitwise operators ( | & ^ ~), arithmetic operators (- + * / % ),unary + operator and loose equality operator==.

Example:

Number('123')   // explicit
+'123'          // implicit
123 != '456'    // implicit
toString() method - used to convert values to String.

(100 + 23).toString() //returns "123"
true.toString()    // returns "true"
Javascript automatically calls the variable's toString() function when you try to "output" an object or a variable.

obj = {name:"Ben"}  // toString converts to "[object Object]"
arr = [1,2,3,4]     // toString converts to "1,2,3,4"
date = new Date()   // toString converts to "Fri Jul 18 2014 09:08:55 GMT+0200"
Truthy and Fasly in JavaScript
Falsy value
In JavaScript, any expressions or value that results in boolean false value, are considered as Falsy. The falsy values/expressions in javascript are:

Obviously boolean false is false.
Any empty string will be evaluated to false.
Any undefined variable will be equal to false.
Any null variable will be equal to false.
Any numerical expression with result in NaN (not a number) will be equal to false.
Any numerical expression with result in zero will be equal to false.
Truthy value
In JavaScript, any expressions or value that results in boolean true value, are considered as Truthy. Any expression or value other than above listed falsy values – is considered truthy.

Example:

'Hello'  // truthy
if(1){}		// truthy 
if(-1){} 	// truthy 
new Boolean(false);     // is truthy values because 'object' is always true
new String('')	 // is truthy values because 'object' is always true




strict mode
JavaScript is a loosely typed scripting language. JavaScript allows strictness of code by using "use strict"; statement at the top of JavaScript code or in a function.

For example, When we expect the compiler to give an error if we have used a variable before defining it, then we apply "strict mode" to the javascript code.

<!DOCTYPE html>
<html>
<body>
	<h1>strict mode</h1>
	
	<p id="errorMessage"></p>
	
	<script>
		"use strict";
		try
		{
			var x = 16; // valid in strict mode
			y = 10; // error
		}
		catch(ex)
		{
			document.getElementById("errorMessage").innerHTML = ex;
		}

    </script>
</body>
</html>
The output will be:

strict mode
ReferenceError: y is not defined
The strict mode in JavaScript does not allow us to use undefined variables, reserved keywords as variable or function name, duplicate properties of an object, duplicate parameters of the function, assign values to read-only properties, Modifying arguments object, and Deleting an undeletable property.

Example:

<script>
try
{
	"use strict";

	x = 1; // error
	var for = 19; // error
	var break = 5; // error

	var person = { name: "John", name: "Ben" }; //error
	function divide(val, val){return val / val }; //error

	var arr = [1 ,2 ,3 ,4, 5];
	arr.length = 10; //error

}
catch(ex)
{
    document.getElementById("errorMessage").innerHTML = ex;
}
</script>
Strict mode can be applied to function level in order to implement strictness only in that particular function.

Example:

x = 1; //valid

function sum(val1, val2){
    "use strict";

     result = val1 + val2; //error

    return result;
}




JavaScript this keyword
The this keyword is a reference variable that refers to the current object.

this alone: refers to a global Object.
Example:

var x = this;
this in function: refers to the Global object [object Window].
Example:

function myFunction() {
  return this;
}
this in strict mode:
Example:

"use strict";
var x = this; //Here, this refers to the Global object [object Window]

"use strict";
function myFunction() {
  return this; //Here,  this is undefined.
}
this in Event Handlers: refers to the HTML element that received the event
Example:

<button onclick="this.style.backgroundColor= 'green'">
    Click Me!
</button>
this in Object Method Binding: refers to the object. In the below example, this refers to people object.
Example:

let people = function(name, age) { 
         this.name = name; 
         this.age = age; 
  
    this.displayInfo = function() { 
       document.write(this.name + " is " + this.age + " years old"); 
      } 
    } 
The call() and apply() method: allows us to write a method that can be used on different objects. Here, person1 object writes its fullName function on person2 object using call() method
Example:

var person1 = {
  fullName: function() {
    return this.firstName + " " + this.lastName;
  }
}
var person2 = {
  firstName:"John",
  lastName: "Wilson",
}
document.write("Hello, "+ person1.fullName.call(person2));



`${ }` -- Variable

"Output is:"+output --- `Output is : ${output}`;


EL - Expression Lang



OOP in JS

Encapsulation via Closures
Encapsulation means hiding information or data.The simplest a way to create encapsulation in JavaScript is using closures. A closure can be created as a function with private state. When creating many closures sharing the same private state, we create an object.

Example:

const Book = function(t, a) {
   let title = t; 
   let author = a; 





Arrow Functions
Arrow functions, introduced in ES6, provides a concise way to write functions in JavaScript. They save developers time and simplify function scope.

One-line arrow functions have implict return and defined without curly braces.
let func = (arg1, arg2, ...argN) => expression;
Example:

var hello = () => "Hello World!";
hello(); // output: "Hello World!"
Multiline arrow functions have multiple statements inside the function, enclosed with curly braces and need an explicit return to return something.
let func = (arg1, arg2, ...argN) =>{
stament1;
...
statementn;
return value;
}
Example:

var sum = (a, b) => {
      let result =  a + b;
    return "Sum is" + result;
};

sum(5, 3);  //output: "sum is 8"
   
   return {
      summary : function() { 
        console.log(`${title} written by ${author}.`);
      } 
   }
}
const book1 = new Book('Hippie', 'Paulo Coelho');
book1.summary(); // Returns Hippie written by Paulo Coelho.
Prototypical inheritance
Object Prototypes (__proto__ )- All JavaScript objects have a prototype. Browsers implement prototypes through the __proto__ property.

Function prototypes (prototype ) - In JavaScript, all functions are also objects, which means that they can have properties.Any time you create a function, it will automatically have a property called prototype.Thus, Functions also have a prototype property.

When we call a function with new, it sets the returned object’s __proto__ property equal to the function’s prototype property. This is the key to inheritance.

Inheritance in JavaScript is implemented through the prototype chain. Every normally created object, array, and function has a prototype chain of __proto__ properties ending with Object.prototype at the top.

Example: Here, we can say that "animal is the prototype of rabbit" or "rabbit prototypically inherits from animal". The animal properties and methods are become automatically available in rabbit. Such properties are called “inherited”.

let animal = {
  eats: true
walk() {
    alert("Animal walk");
  }
};
let rabbit = {
  jumps: true
  __proto__: animal	// sets animal to be a prototype of rabbit.
};

// we can find both properties in rabbit now:
alert( rabbit.eats ); // true 
alert( rabbit.jumps ); // true
// walk is taken from the prototype
rabbit.walk(); // Animal walk
In the above example, when alert tries to read property rabbit.eats, it’s not in rabbit but JavaScript follows the prototype reference and finds it in animal.Also the walk() method is automatically taken from the prototype.





Event Bubbling
In Event Bubbling, the event propagates from the target element to its parents, then all its ancestors that are on the way to top. Bubbling follows the Bottom to Top approach.

Example: Event Bubbling works for all handlers, regardless of how they registered with the addEventListener(). When we click on any element, event propagates or bubbles back up the DOM tree, from the target element up to the Window, visiting all of the ancestors of the target element one by one. (a-> p -> div)

<body>
<div onclick="alert('Bubbling: ' + this.tagName)">DIV
    <p onclick="alert('Bubbling: ' + this.tagName)">P
        <a href="#" onclick="alert('Bubbling: ' + this.tagName)">Click Me!!</a>
    </p>
</div>
</body>
If we click on the <a> element in the above example, it results in the alert pop-ups in below order:

alert pop-ups saying 'Bubbling: a'
alert pop-ups saying 'Bubbling: p'
alert pop-ups saying 'Bubbling: div'
Event Capturing
In Event Capturing, the event propagates from the top element to the target element. Capturing follows the Top to Bottom approach.

Example: Event capturing only works with event handlers registered with the addEventListener() method when the third argument is set to true. When we click on the any element, the event capturing propagates the element from top element to target element (div -> p -> a).

<body>
<div id="wrap">DIV
    <p class="hint">P<br>
        <a href="#">Click Me!!</a>
    </p>
</div>

<script>
    function showTagName() {
        alert("Capturing: "+ this.tagName);
    }
    
    var elems = document.querySelectorAll("div, p, a");
    for(let elem of elems) {
        elem.addEventListener("click", showTagName, true);
    }
</script>
If we click on the <a> element in the above example, it results in the alert pop-ups in below order:

alert pop-ups saying 'Capturing: div'
alert pop-ups saying 'Capturing: p'
alert pop-ups saying 'Capturing: a'
Event Target

Event Target is the target element that has generatd the event in DOM. The event.target is used to access the target element.

Stopping the Event Propagation

event.stopPropagation() method
It used to stop the event to travel to the bottom to top i.e. Event Bubbling. If you want to stop the event flow from event target to top element in DOM, we use event.stopPropagation() method.

event.stopImmediatePropagation() method
If an element has multiple event handlers on a single event, then even if one of them stops the bubbling, the other ones still execute. The event.stopPropagation() stops event bubbling but all other handlers will run. To stop the bubbling and prevent handlers on the current element from running, we use event.stopImmediatePropagation() method.





<body>
  <form>
     <input>
     <input>
  </form>
</body>

document.form.input[1].value


alert();  - To display some message (blocking operation)

prompt() -For getting input from user (blocking operation)



DESCRIPTION
Selecting elements from the DOM
JavaScript is used to get or modify the content or value of the HTML elements on the page. To perform any action on the HTML element, we need to select the target HTML element.

The ways for selecting the elements on a page are listed below:

Selecting Elements by ID
The getElementById() method is used to select an element based on its unique ID. The getElementById() method will return the element as an object if the matching element was found, or null if no matching element was found in the document.

Example: In the example below, getElementById()is a method, while innerHTML is a property. It selects the element with the id = "demo" attribute and changes the content to "Paragraph Changed".

<body>
    <p id="demo">This is a paragraph.</p>
    
    <script>
        document.getElementById("demo").innerHTML = "Paragraph Changed";
    </script>
</body>
Selecting Elements by Class Name
The getElementsByClassName() method used to select all the elements having specific class names. This method returns an array-like object of all child elements which have all of the given class names.

Example: selects the list of elements which have class="test" attribute and changes the background color as yellow.

<body>
<div class="test"> This is a div element with class="test". </div>

<p>
	<h1 class= "test"> This is a h1 element with class="test". </h1>
	This is a paragraph.
</p>

<p class="test">This is a p element with class="test".</p>

<script>
	var matches = document.getElementsByClassName("test");
	for(var elem in matches) {  
        matches[elem].style.background = "yellow";
    }
</script>
</body>
Selecting Elements by Tag Name
The getElementsByTagName() method used to select HTML elements by tag name. This method also returns an array-like object of all child elements with the given tag name.

Example: selects all the <p> element and changes the background color as red.

<body>
    <h1> Heading </h1>
    <p>This is a paragraph of text.</p>
    <div>This is another paragraph of text.</div>
    <p>This is one more paragraph of text.</p>   
 
    <script>
       	var matches = document.getElementsByTagName("p");
        
        for(var elem in matches) {  
        matches[elem].style.background = "red";
        }
    </script>
</body>
Selecting Elements with CSS Selectors
We can use querySelector() and querySelectorAll() methods to select elements that matches the specified CSS selector. The querySelector() finds the first element that matches a CSS selector whereas the querySelectorAll() finds all elements that match a CSS selector.

Example:

<body>
    <p id = "para">This is a paragraph</p>
    <ul>
        <li>Apple</li>
        <li>Orange</li>
        <li>Mango</li>
    </ul>
        
    <script>  
    var matches = document.querySelectorAll("ul li");
 
    for(var elem of matches) {  
        document.write(elem.innerHTML + "<br>"); //outputs: "Apple Orange Mango"
    }
      document.write(document.querySelector('#para').textContent); //outputs: "This is a paragraph"
     
    </script>
</body>



Traversing the DOM
The DOM allows us to do anything with elements and their contents, but first we need to reach the corresponding DOM object. The properties used to transverse the DOM or to reach/get a particular DOM object are listed below:

Topmost nodes
The document object is the root of every node in the DOM. The topmost tree nodes are associated with document properties:

document.documentElement property - refers the DOM node of the <html> tag.
document.head property - refers the DOM node of the <head> tag.
document.body property - refers the DOM node of the <body> tag.
Parent Nodes
The parent of any node is the node that is one level above in the DOM tree. There are two properties to get the parent — parentNode and parentElement. The parentNode is most commonly used for traversing the DOM.

Example:

<body>
    <div id="main">
        <p id="para">This is a note!</p>
    </div>

    <script>
        let elmt = document.querySelector('#para');
        document.write(elmt.parentNode+ "<br>"); // outputs: [object HTMLDivElement]
    </script>
</body>
The parentElement property returns the “element” parent, whereas parentNode returns “any node” parent. With the one exception of document.documentElement:

alert( document.documentElement.parentNode ); // document
alert( document.documentElement.parentElement ); // null
Child Nodes
The children of a node are the nodes that are one level below it. The properties are listed below:

childNodes property - returns a list of child nodes, including text nodes.
firstChild property - give access to the first child node.
lastChild property - give access to the last child node.
Example:

<body>
	<div id="myDiv">
       	<p>This is a paragraph - first child</p>
        <div> this is a div elemt - last child</div> 
    </div>
    <script>
        let elmt = document.querySelector('#myDiv');
       	document.write("<br> Child nodes of div element: <br>");
        for (let i = 0; i < elmt.childNodes.length; i++) {
              document.write(elmt.childNodes[i]  + "<br>");
              }
              
       document.write("<br> First child of div element: <br>" +elmt.firstChild) ; 
       
       document.write("<br> Last child of div element: <br>" +elmt.lastChild) ;        
    </script>
</body>
The output will be:

This is a paragraph - first child

this is a div elemt - last child

Child nodes of div element: 
[object Text]
[object HTMLParagraphElement]
[object Text]
[object HTMLDivElement]
[object Text]

First child of div element: 
[object Text]
Last child of div element: 
[object Text]
Sibling Nodes
Siblings are nodes that are children of the same parent. The siblings of a node are any node on the same tree level in the DOM.

previousElementSibling property - give access to the previous sibling Node, i.e. the node that immediately precedes the specified node.
nextElementSibling property - give access to the next sibling vode, i.e. the node that immediately precedes or follows the specified node.
Example:

<body>
    <ul >
        <li>list item 1</li>
        <li class="list">list item 2</li>
        <li>list item 3</li>
    </ul>
    <script>             
       const secondListItem = document.querySelector('.list');       
        document.write(secondListItem.previousElementSibling.textContent) ;  // outputs:  "list item 1"
       document.write(secondListItem.nextElementSibling.textContent);   //outputs: "list item 3"           
    </script>
</body>


JavaScript Events
Events occur when user interaction takes place on a web page, such as when the end-user clicked a link or button, pressed a key on the keyboard, moved the mouse pointer, submits a form, etc. The browser also triggers the events, such as the page load and unload events.

When an event occurs, we use a JavaScript event handler (or an event listener) to detect them and perform a specific task.

Some of the commonly used JavaScript Events are listed below:

onclick - This is a click event occurs when a user clicks the element on a web page.

ondblclick - This is a click event occurs when a user double clicks the element on a web page.

onload - This is a load event occurs when the browser has finished loading the page.

onunload - This is a load event occurs when a user closes the document.

onresize - This is a load event occurs when the browser window is minimized or maximized.

onmouseover - This is a mouse event occurs when the user moves the mouse over an HTML element.

onmouseout - This is a mouse event occurs when the user moves the mouse away from an HTML element.

onkeydown - This is a keyboard event occurs when the user presses down a key on the keyboard.

onkeyup - This is a keyboard event occurs when the user releases a key on the keyboard.

onfocus - This is a form-input event occurs when the user gives focus to an element on a web page.

onblur - This is a form-input event occurs when the user takes the focus away from a form element or a window.

onchange - This is a form-input event that occurs when a user changes the value of a form element.

onsubmit - This is a form-input event that occurs when the user submits a form on a web page.

Example:

<body>
    <button onclick= onclickEvent()>Click me!!</button>
    <p id= "para" onmouseover = onmouseoverEvent() onmouseout = onmouseoutEvent() >This is a Paragraph....</p>
    <script>
        function onclickEvent(){
            alert('Hello, You clicked the button');
        }
        function onmouseoverEvent(){
            document.getElementById("para").style.backgroundColor = "green";
        }
        function onmouseoutEvent(){
            document.getElementById("para").style.backgroundColor = "yellow";
        }
    </script>
</body>
JavaScript EventListener
An event listener is a function in JavaScript that waits for an event to occur. The addEventListener() function is an inbuilt function in JavaScript used to handle the event.

The Syntax of addEventListener() function: element.addEventListener(event, function, useCapture)

Where,

event - Specifies the name of the event.
function - Specifies the function to run when the event occurs
useCapture - It is an optional parameter takes a boolean value. If the parameter value is true then the event handler is executed in the capturing phase. If the parameter value is false then the event handler is executed in the bubbling phase.
The removeEventListener() method used to remove an event handler that has been attached with the addEventListener() method.

Example:

<body>
    <h2>JavaScript addEventListener()</h2>
    <p id="myBtn">This is a paragraph.</p>
    <p id="demo"></p>
    <script>
        var x = document.getElementById("myBtn");
        x.addEventListener("mouseover", myFunction);
        x.addEventListener("mouseout", mySecondFunction);

        function myFunction() {
        document.getElementById("demo").innerHTML += "Moused over!<br>";
        x.style.backgroundColor = "green";
        }
        function mySecondFunction() {
        document.getElementById("demo").innerHTML += "Moused out!<br>";
        x.style.backgroundColor = "white";
        }
        
    </script>


</body>





